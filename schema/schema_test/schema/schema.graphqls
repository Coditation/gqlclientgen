scalar Any

scalar Map

# Schema
type Object {
  name: String!
  properties: Map!
}

type ObjectRecord {
  id: ID!
  type: String!
  properties: Map!
}

enum HealthStatus {
  HEALTHY
  UNHEALTHY
}

type HealthError {
  test: String!
  message: String!
}

type ConnectorHealth {
  status: HealthStatus!
  lastChecked: Int!
  errors: [HealthError]
}

input NewObjectRecordInput {
  name: String!
  properties: Map!
}

input OnCreatedObjectInput {
  name: String!
  id: ID!
  properties: Map!
}

input OnUpdatedObjectInput {
  name: String!
  id: ID!
  properties: Map!
}

input UpdateObjectRecordInput {
  name: String!
  properties: Map!
}

input PageInput {
  first: Int!
  after: String!
}

type PageInfo {
  endCursor: ID!
  hasNextPage: Boolean!
}

type QueryResult {
  edges: [Edge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Edge {
  cursor: String!
  node: ObjectRecord!
}

input AuthInfoInput {
  type: String!
  properties: Map!
}

# Operations
type Query {
  objects(connectionId: ID!): [Object]!
  objectRecord(connectionId: ID!, name: String!, id: ID!): ObjectRecord!
  soql(connectionId: ID!, q: String!, input: PageInput!): QueryResult!
  health: ConnectorHealth!
}

type Mutation {
  registerConnection(connectionId: ID!, input: AuthInfoInput): Any
  revokeConnection(connectionId: ID!): Any
  createObjectRecord(
    connectionId: ID!
    input: NewObjectRecordInput!
  ): ObjectRecord!
  updateObjectRecord(
    connectionId: ID!
    id: ID!
    input: UpdateObjectRecordInput!
  ): ObjectRecord!
  onObjectRecordsCreated(
    connectionId: ID!
    input: [OnCreatedObjectInput!]!
  ): Any
  onObjectRecordsUpdated(
    connectionId: ID!
    input: [OnUpdatedObjectInput!]!
  ): Any
  pollForChange(connectionId: ID!): Any
  keepTokenAlive(connectionId: ID!): Any
  runIntegrationTests: Any
}

type Subscription {
  objectRecordsCreated(connectionId: ID!): [ObjectRecord]!
  objectRecordUpdated(connectionId: ID!, name: String!, id: ID!): ObjectRecord!
}
